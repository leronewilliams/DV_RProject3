presip(volcano)
preip(volcano)
prsep(volcano)
presp(volcano)
?presp
??presp
presp(volcano)
require("presp")
persp(volcano)
persp(volcano, size=8)
persp(volcano)
persp(volcano)
persp(volcano)
persp(iris)
persp(diamonds)
diamonds
?persp
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
round(res, 3)
xE <- c(-10,10); xy <- expand.grid(xE, xE)
points(trans3d(xy[,1], xy[,2], 6, pmat = res), col = 2, pch = 16)
lines (trans3d(x, y = 10, z = 6 + sin(x), pmat = res), col = 3)
phi <- seq(0, 2*pi, len = 201)
r1 <- 7.725 # radius of 2nd maximum
xr <- r1 * cos(phi)
yr <- r1 * sin(phi)
lines(trans3d(xr,yr, f(xr,yr), res), col = "pink", lwd = 2)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
## Don't draw the grid lines :  border = NA
par(bg = "slategray")
persp(x, y, z, theta = 135, phi = 30, col = "green3", scale = FALSE,
ltheta = -120, shade = 0.75, border = NA, box = FALSE)
par(bg = "white")
x <- seq(-1.95, 1.95, length = 30)
y <- seq(-1.95, 1.95, length = 35)
z <- outer(x, y, function(a, b) a*b^2)
nrz <- nrow(z)
ncz <- ncol(z)
# Create a function interpolating colors in the range of specified colors
jet.colors <- colorRampPalette( c("blue", "green") )
# Generate the desired number of colors from this palette
nbcol <- 100
color <- jet.colors(nbcol)
# Compute the z-value at the facet centres
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zfacet, nbcol)
persp(x, y, z, col = color[facetcol], phi = 30, theta = -30)
par(op)
library(Rcmdr)
attach(mtcars)
scatter3d(wt, disp, mpg)
library("scatterplot3d", lib.loc="~/R/win-library/3.1")
library(Rcmdr)
attach(mtcars)
scatter3d(wt, disp, mpg)
install.packages("Rcmdr")
library(Rcmdr)
attach(mtcars)
scatter3d(wt, disp, mpg)
ls()
s <- scagnostics(mtcars)
install.packages("scagnostics")
s <- scagnostics(mtcars)
library(scagnostics)
s
library(scagnostics)
s <- scagnostics(mtcars)
s
browseVigenttes(packahe= "ggplot2")
browseVignettes(package="ggplot2")
vignettes()
vignette()
browseVignette()
browseVignettes()
browseVignettes()
update.packages()
library(help = "datasets")
head(state)
state
x  <- state
scagnostics(as.matrix(mtcars))
g <- scagnosticsGrid(s)
go <- g[o,]
plot(mtcars[[go$x]], mtcars[[go$y]], pch=19,
xlab=names(mtcars)[go$x], ylab=names(mtcars)[go$y])
g <- scagnosticsGrid(s)
go <- g[o,]
o <- scagnosticsOutliers(s)
o[o]
# one outlier, let's plot it
g <- scagnosticsGrid(s)
go <- g[o,]
plot(mtcars[[go$x]], mtcars[[go$y]], pch=19,
xlab=names(mtcars)[go$x], ylab=names(mtcars)[go$y])
e <- scagnosticsExemplars(s)
e[e]
ge <- g[e,]
par(mfrow = c(2,2))
for (i in 1:dim(ge)[1])
plot(mtcars[[ge$x[i]]], mtcars[[ge$y[i]]], pch=19,
xlab=names(mtcars)[ge$x[i]], ylab=names(mtcars)[ge$y[i]])
?dataset
summary(BOD)
tail(BOD)
tail(trees)
tail(volcano)
names(sunspots)
tail(sunspots)
tail(state)
tail(state)
sunspots
sunspots.year
sunspot.year
sunpot.month
sunspot.month
name(sunspot)
names(sunspot)
names(diamonds)
rivers
quakes
morley
crimtab
head(AirPassengers)
as.matrix(AirPassengers)
as.matrix(diamonds)
as.matrix(diamonds)
as.matrix(mtcars)
as.matrix(vocab)
as.matrix(vocab)
as.matrix(diamonds)
diamonds
as.matirx(Titanic)
as.matrix(Titanic)
head(Titanic)
as.matrix(iris)
iris
str(iris)
?str
str(diamonds)
str(diamond)
str(faithful)
faithful
str(cars)
str(islands)
islands
str(sunspots)
str(mtcars)
str(rivers)
str(sleep)
str(trees)
str(uspop)
str(volcano)
volcano
head(volcano)
presp(volcano)
presp(volcano)
require(persp)
persp(valcon)
persp(volcano)
persp(volcano, size=8)
persp(volcano, scale=8)
persp(volcano, scale=8)
?volcano
map(state)
require(map)
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from DIAMONDS"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521:ORCL', USER='C##cs329e_law229', PASS='orcl_law229', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
vocab <- df <- data.frame(eval(parse(text=substring(getURL(URLencode('http://129.152.144.84:5001/rest/native/?query="select * from Vocabulary"'), httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521:ORCL', USER='C##cs329e_law229', PASS='orcl_law229', MODE='native_mode', MODEL='model', returnFor = 'R', returnDimensions = 'False'), verbose = TRUE), 1, 2^31-1))))
require("RCurl")
datasets
datsets()
?datasets
library(help = "datasets").
library(help = "datasets").\
library(help = "datasets")
